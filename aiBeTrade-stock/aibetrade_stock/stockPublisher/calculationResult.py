import json
import os
import requests
from datetime import datetime, timedelta
from pybit.unified_trading import HTTP
import schedule
import time
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
accounts = [
    {
        "api_key": os.getenv('API_BYBIT_CR'),
        "api_secret": os.getenv('API_BYBIT_SEC_CR'),
        "strategy_id": "roman_strat",
        "strategy_name": "ABT BITS PRO_PAR",
        "start_deposit": 4920,  # –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 
        "channel_id": os.getenv('ID_CH_CR')  # ID Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    },
    {
        "api_key": os.getenv('API_BYBIT_CR_1'),
        "api_secret": os.getenv('API_BYBIT_SEC_CR_1'),
        "strategy_id": "constantin_strat",
        "strategy_name": "ABT BITS PRO_NOM",
        "start_deposit": 4050,  # –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        "channel_id": os.getenv('ID_CH_CR')  # ID Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    },
    {
        "api_key": os.getenv('API_BYBIT_CR_2'),
        "api_secret": os.getenv('API_BYBIT_SEC_CR_2'),
        "strategy_id": "news_strat",
        "strategy_name": "ABT BITS PRO_NEWS",
        "start_deposit": 2350,  # –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        "channel_id": os.getenv('ID_CH_CR')  # ID Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    }
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram
URL_BOT = 'https://api.telegram.org/bot'
TELEGRAM_TOKEN = os.getenv('API_BOT_CR')  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ API
def publish_to_telegram(profit, totalProfit, days, is_successful, strategy_name, channel_id):
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        if is_successful:
            image_path = "pic/successful.jpg"
            message_text = (
                f"üü¢ <b>ABT Bits Pro: day trading was Successful!</b>\n\n"
                f"Strategy: <b>{strategy_name}</b>\n"
                f"Profit of trade is: <b>{profit}%</b>\n"
                f"Total profit: <b>{totalProfit}%</b>\n"
                f"Number of Trading Days: <b>{days}</b>"
            )
        else:
            image_path = "pic/failure.jpg"
            message_text = (
                f"üî¥ <b>ABT Bits Pro: day trading was Failure!</b>\n\n"
                f"Strategy: <b>{strategy_name}</b>\n"
                f"Profit of trade is: <b>{profit}%</b>\n"
                f"Total profit: <b>{totalProfit}%</b>\n"
                f"Number of Trading Days: <b>{days}</b>"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üöÄ ABT Bits Pro Bot", "url": "https://t.me/aibetradecombot"},
                    {"text": "üõ†‚ÅâÔ∏è ABT Support", "url": "https://t.me/abtsupportbot"}
                ]
            ]
        }

        url = f'{URL_BOT}{TELEGRAM_TOKEN}/sendPhoto'

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API Telegram
        with open(image_path, 'rb') as image_file:
            files = {'photo': image_file}
            data = {
                'chat_id': channel_id,
                'caption': message_text,
                'parse_mode': 'HTML',
                'reply_markup': json.dumps(keyboard)
            }
            response = requests.post(url, files=files, data=data)

        if response.status_code == 200:
            logger.info(f"Message sent to Telegram for strategy {strategy_name}.")
        else:
            logger.error(f"Failed to send message: {response.status_code}, {response.text}")
    except Exception as e:
        logger.error(f"Error publishing to Telegram: {e}")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏: save_balance_to_file, get_previous_balance, count_days_in_file, calculate_profit

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
def main_for_account(account):
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å API Bybit –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        session = HTTP(
            testnet=False,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ False, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º API
            api_key=account["api_key"],
            api_secret=account["api_secret"]
        )
        logger.info(f'Api keys for {account["strategy_name"]}: {account["api_key"]}')

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
        response = session.get_wallet_balance(
            accountType="UNIFIED",
            coin="USDT"
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bybit API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f'Full response for {account["strategy_name"]}: {json.dumps(response, indent=4)}')

        if response['retCode'] == 0:
            try:
                result_list = response['result']['list'][0]
                coin_data = result_list['coin'][0]
                resultBalance = float(coin_data['usdValue'])
                logger.info(f'Available to Withdraw for {account["strategy_name"]}: {resultBalance}')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
                save_balance_to_file(resultBalance, account["strategy_id"])
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                preBalance = get_previous_balance(account["strategy_id"])

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)
                days = count_days_in_file(account["strategy_id"])

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç
                profit, totalProfit = calculate_profit(resultBalance, preBalance, account["start_deposit"])
                
                if profit is not None and totalProfit is not None:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –∏–ª–∏ –ø—Ä–æ–≤–∞–ª –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                    is_successful = resultBalance > preBalance
                    publish_to_telegram(profit, totalProfit, days, is_successful, account["strategy_name"], account["channel_id"])
                
            except (KeyError, IndexError) as e:
                logger.error(f'Error extracting resultBalance: {e}')
        else:
            logger.error(f'Error in response for {account["strategy_name"]}: {response["retMsg"]}')
    except Exception as e:
        logger.error(f"Error in Bybit API session for {account['strategy_name']}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
def main():
    for account in accounts:
        main_for_account(account)

schedule.every(60).minutes.do(main)

# –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main()

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
while True:
    schedule.run_pending()
    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
