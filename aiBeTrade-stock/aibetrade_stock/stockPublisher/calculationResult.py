import json
import os
import requests
from datetime import datetime, timedelta
from pybit.unified_trading import HTTP
from pathlib import Path
import schedule
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram
URL = os.getenv('URL')
URL_BOT = 'https://api.telegram.org/bot'
TELEGRAM_TOKEN = os.getenv('API_BOT_CR')  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
CHANNEL_ID = os.getenv('ID_CH_CR')  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
API_BYBIT = os.getenv('API_BYBIT_CR')
API_BYBIT_SEC = os.getenv('API_BYBIT_SEC_CR')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ API
def publish_to_telegram(profit, totalProfit, days, is_successful):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
    if is_successful:
        image_path =  "pic/successful.jpg"
        message_text = (
            f"üü¢ <b>ABT Bits Pro: day trading was Successful!</b>\n\n"
            f"Strategy: <b>ABT BITS PRO</b>\n"
            f"Profit of trade is: <b>{profit}%</b>\n"
            f"Total profit: <b>{totalProfit}%</b>\n"
            f"Number of Trading Days: <b>{days}</b>"
        )
    else:
        image_path = "pic/failure.jpg"
        message_text = (
            f"üî¥ <b>ABT Bits Pro: day trading was Failure!</b>\n\n"
            f"Strategy: <b>ABT BITS PRO</b>\n"
            f"Profit of trade is: <b>{profit}%</b>\n"
            f"Total profit: <b>{totalProfit}%</b>\n"
            f"Number of Trading Days: <b>{days}</b>"
        )

    url = f'{URL_BOT}{TELEGRAM_TOKEN}/sendPhoto'

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API Telegram
    with open(image_path, 'rb') as image_file:
        files = {'photo': image_file}
        data = {
            'chat_id': CHANNEL_ID,
            'caption': message_text,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, files=files, data=data)

    if response.status_code == 200:
        print(f"Message sent to Telegram channel {CHANNEL_ID}.")
    else:
        print(f"Failed to send message: {response.status_code}, {response.text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–∞—Ç—ã –≤ —Ñ–∞–π–ª
def save_balance_to_file(balance, filename="balance_data.json"):
    filepath = filename
    current_date = datetime.now().strftime('%d.%m.%Y')

    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
            if isinstance(data, dict):
                data = [data]
    except FileNotFoundError:
        data = []  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    for entry in data:
        if entry['date'] == current_date and entry['balance'] == balance:
            print(f"Balance for {current_date} has not changed. No new entry added.")
            return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    new_entry = {'balance': balance, 'date': current_date}
    data.append(new_entry)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
    with open(filepath, 'w') as file:
        json.dump(data, file, indent=4)

    print(f"Balance saved to {filepath}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
def get_previous_balance(filename="balance_data.json"):
    filepath = filename
    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
            if isinstance(data, dict):
                data = [data]
            prev_date = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
            for entry in data:
                if entry['date'] == prev_date:
                    return float(entry['balance'])
            return None
    except FileNotFoundError:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ –±–∞–ª–∞–Ω—Å–æ–≤
def count_days_in_file(filename="balance_data.json"):
    filepath =  filename
    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
            if isinstance(data, dict):
                data = [data]
            return len(data)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
    except FileNotFoundError:
        return 0

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
def calculate_profit(resultBalance, preBalance):
    if preBalance is None:
        print("No previous balance data available for calculation.")
        return None, None
    
    profit = (resultBalance / preBalance - 1) * 100
    totalProfit = (resultBalance / 5000 - 1) * 100
    
    return round(profit, 2), round(totalProfit, 2)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def main():
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å API Bybit
    session = HTTP(
        testnet=False,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ False, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º API
        api_key=API_BYBIT,
        api_secret=API_BYBIT_SEC
    )

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT)
    response = session.get_wallet_balance(
        accountType="UNIFIED",
        coin="USDT"
    )

    if response['retCode'] == 0:
        try:
            result_list = response['result']['list'][0]
            coin_data = result_list['coin'][0]
            resultBalance = float(coin_data['availableToWithdraw'])
            print(f'Available to Withdraw: {resultBalance}')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            save_balance_to_file(resultBalance)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            preBalance = get_previous_balance()

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)
            days = count_days_in_file()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç
            profit, totalProfit = calculate_profit(resultBalance, preBalance)
            
            if profit is not None and totalProfit is not None:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –∏–ª–∏ –ø—Ä–æ–≤–∞–ª –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                is_successful = resultBalance > preBalance
                publish_to_telegram(profit, totalProfit, days, is_successful)
            
        except (KeyError, IndexError) as e:
            print(f'Error extracting resultBalance: {e}')
    else:
        print(f'Error in response: {response["retMsg"]}')

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ 10:00 —É—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
schedule.every().day.at("12:00").do(main)
main()
# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
while True:
    schedule.run_pending()
    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
