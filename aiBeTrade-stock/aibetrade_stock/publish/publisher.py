import time
import requests
import json
import logging
import openai
import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –∏ id –≥—Ä—É–ø–ø—ã
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_GROUP_ID = "@abtbitxx"
TELEGRAM_GROUP_ID_RU = "@abtbit"

URL = os.getenv('URL')
URL_BOT = 'https://api.telegram.org/bot'
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def fetch_news():
    try:
        response = requests.get(URL)
        response.raise_for_status()
        news_data = response.json()
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å URL")
        return news_data["data"]
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


def send_news_to_telegram(news_item):
  
    image_url = news_item.get("image_url", "")
    title = news_item.get("title", "")
    text = news_item.get("text", "")
    sentiment = news_item.get("sentiment", "")
    source_name = news_item.get("source_name", "")
    news_url = news_item.get("news_url", "")

    sentiment_emoji = "‚ö™"  # –°–µ—Ä—ã–π —Å–º–∞–π–ª–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if sentiment == "Positive":
        sentiment_emoji = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
    elif sentiment == "Negative":
        sentiment_emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥

    message_text = f"<b>{title}</b>\n\n{text}\n\n{sentiment_emoji}\n\nSorce:<a href='{news_url}'>{source_name}</a>"
 
    logging.info("–ü–æ—Å—Ç –≤ Telegram: " + message_text)
    
    try:
           requests.get(f'{URL_BOT}{TELEGRAM_BOT_TOKEN}/sendPhoto?chat_id={TELEGRAM_GROUP_ID}&photo={image_url}&parse_mode=HTML&caption={message_text}')
           logging.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
           textGpt = gpt_chat("–†—É—Å—Å–∫–∏–π", message_text)
        #    TextRU = textGpt.choices[0].message['content'].strip()


        #    response_json = json.loads(textGpt)
        #    TextRU = response_json["choices"][0]["message"]["content"]

           requests.get(f'{URL_BOT}{TELEGRAM_BOT_TOKEN}/sendPhoto?chat_id={TELEGRAM_GROUP_ID_RU}&photo={image_url}&parse_mode=HTML&caption={textGpt}')
           logging.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ Telegram: {e}")


def display_news_item(news_item):
    print("News Item:")
    print(f"Title: {news_item.get('title', '')}")
    print(f"Text: {news_item.get('text', '')}")
    print(f"Sentiment: {news_item.get('sentiment', '')}")
    print(f"Image URL: {news_item.get('image_url', '')}")
    print(f"Source name: {news_item.get('source_name', '')}")
    print(f"News url: {news_item.get('news_url', '')}")
  
    print("-" * 40)
    
def gpt_chat(prompt, text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
    prompt_text = "–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ "+prompt+" –ù–µ –º–µ–Ω—è–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML"
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT-—á–∞—Ç
        response  = client.chat.completions.create(
    messages=[
        {
            "role": "user",
            "content": prompt_text+": "+text,
        }
    ],
    model="gpt-3.5-turbo",
)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-—á–∞—Ç–∞
        return response.choices[0].message.content
    
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


def main():
    while True:
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
        news_list = fetch_news()
        for news_item in news_list:
            # display_news_item(news_item)
            send_news_to_telegram(news_item)
        logging.info("–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥–µ–º 60 –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        time.sleep(3600)  # –∂–¥—ë–º 1 —á–∞—Å

if __name__ == "__main__":
    main()