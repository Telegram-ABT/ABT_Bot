version: "3.9"
services:
  portainer:
    image: portainer/portainer-ce
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      
  postgres:
    container_name: postgres_container
    image: postgres:latest
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../DatabasePOSTGRE:/docker-entrypoint-initdb.d
      - habrdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    networks:
      - postgres

  postgres_exporter:
    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:v0.10.1
    environment:
      DATA_SOURCE_URI: "postgres:5432/habrdb?sslmode=disable"
      DATA_SOURCE_USER: ${DATA_SOURCE_USER}
      DATA_SOURCE_PASS: ${DATA_SOURCE_PASS}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    networks:
      - postgres

  # backup:
  #   image: jhaeger/postgres-backup:latest
  #   environment:
  #     - CRON_TIMER=0 2 * * *
  #     - BACKUP_DB_HOST=db
  #     - BACKUP_DB=mydb
  #     - BACKUP_DB_USER=myuser
  #     - BACKUP_DB_PASSWORD=mypassword
  #   volumes:
  #     - backup_volume:/root/backups
  #   depends_on:
  #     - postgres

  admin_telegram:
    image: admin_telegram
    volumes:
      - ./aibetrade_stock/adminTelegram:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/adminTelegram/
      dockerfile: DockerFile.app.adminTelegram
    environment:
      - ADMIN_CHEBAL_BOT=${ADMIN_CHEBAL_BOT}
      - WEBHOOK=${WEBHOOK}
      - SECRET_CHAT=${SECRET_CHAT}
      - TOKEN_BOT_EVENT=${TOKEN_BOT_EVENT}
  events:
    image: events
    volumes:
      - ./aibetrade_stock/events:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/events/
      dockerfile: DockerFile.app.events
    environment:
      - TOKEN_BOT_EVENT=${TOKEN_BOT_EVENT}
      - WEBHOOK=${WEBHOOK}
      - SECRET_CHAT=${SECRET_CHAT}
  tasker:
    image: tasker
    volumes:
      - ./aibetrade_stock/tasker:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/tasker/
      dockerfile: DockerFile.app.tasker
    environment:
      # - TOKEN_BOT_EVENT=${TOKEN_BOT_EVENT}
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_URL=${POSTGRES_URL}

      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - WEBHOOK=${WEBHOOK}
      # - SECRET_CHAT=${SECRET_CHAT}
      # - TOKEN_BOT_EVENT=${TOKEN_BOT_EVENT}

      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - VECTOR_DB_WORK_URL=${VECTOR_DB_WORK_URL}:${PORT_VECTOR_DB_WORK}
      # - PORT_GENERATE_ANSWER=${PORT_GENERATE_ANSWER}
    # ports:
    #   - 5004:5004
  removeSpam:
    image: remove_spam
    volumes:
      - ./aibetrade_stock/removeSpam:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/removeSpam/
      dockerfile: DockerFile.app.removeSpam
    environment:
      - BOT_REMOVE_SPAM=${BOT_REMOVE_SPAM}
      - WEBHOOK=${WEBHOOK}
      - SECRET_CHAT=${SECRET_CHAT}
  
  personalGpt:
    image: personal_gpt
    volumes:
      - ./aibetrade_stock/personalGpt:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/personalGpt/
      dockerfile: DockerFile.app.personalGpt
    environment:
      # - BOT_REMOVE_SPAM=${BOT_REMOVE_SPAM}
      # - WEBHOOK=${WEBHOOK}
      # - SECRET_CHAT=${SECRET_CHAT}
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_URL=${POSTGRES_URL}
      - api_key_binance=${api_key_binance}
      - api_secret_binance=${api_secret_binance}

  publisher:
    image: publisher
    volumes:
      - ./aibetrade_stock/publish:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/publish/
      dockerfile: DockerFile.app.publish
    environment:
      # - BOT_REMOVE_SPAM=${BOT_REMOVE_SPAM}
      # - WEBHOOK=${WEBHOOK}
      # - SECRET_CHAT=${SECRET_CHAT}
      # - API_ID=${API_ID}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - URL=${URL}
  
  stockPublisher:
    image: stockPublisher
    volumes:
      - ./aibetrade_stock/stockPublisher:/app
      # - ./pyproject.toml:/app/pyproject.toml
    restart: unless-stopped
    build:
      context: ./aibetrade_stock/stockPublisher/
      dockerfile: DockerFile.app.stockPublisher
    environment:
      # - BOT_REMOVE_SPAM=${BOT_REMOVE_SPAM}
      # - WEBHOOK=${WEBHOOK}
      # - SECRET_CHAT=${SECRET_CHAT}
      # - API_ID=${API_ID}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - URL=${URL}
      - URL_BOT=${URL_BOT}
      - API_BOT_CR=${API_BOT_CR}
      - ID_CH_CR=${ID_CH_CR}
      - API_BYBIT_CR=${API_BYBIT_CR}
      - API_BYBIT_SEC_CR=${API_BYBIT_SEC_CR}
      

volumes:
  habrdb-data:
  pgadmin-data:
  portainer_data:

networks:
  postgres:
    driver: bridge